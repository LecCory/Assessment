# Node.js Function App to Linux on Azure
# Build a Node.js function app and deploy it to Azure as a Linux function app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger: none

variables:

  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'e9df22f4-ef3b-492a-aabf-7d9afa1a3b76'

  # Function app name
  functionAppName: 'clapptest0001'

  # Environment name
  environmentName: 'dev'

  # Agent VM image name
 

stages:
- stage: IaC
  displayName: Create resources
  pool:
      name: SelfPool
      
  jobs:
    - job: CreateResources
      steps:    
      - task: AzureCLI@2
        inputs:
          azureSubscription: 'Azure subscription 1 (1ff6c602-69fe-454f-a795-de22a178a6c0)'
          scriptType: bash
          scriptLocation: 'inlineScript'
          inlineScript: 'az group create -n rgcoryleclair002 -l canadacentral'
      - task: AzureCLI@2
  
        inputs:
          azureSubscription: 'Azure subscription 1 (1ff6c602-69fe-454f-a795-de22a178a6c0)'
          scriptType: bash
          scriptLocation: 'inlineScript'
          inlineScript: 'az deployment group create -n myapp --resource-group rgcoryleclair002 -f "$(Build.SourcesDirectory)/bicep/main.bicep" -p "appName=clfapp001" -p existOrNew=false'
      - task: CmdLine@2
        inputs:
          script: |
            keys = az cosmosdb keys list --name clfapp001uj5oeplscvwcu --resource-group rgcoryleclair002 --type keys --output json | ConvertFrom-json | Select-Object -ExpandProperty primaryMasterKey
            echo "##vso[task.setvariable variable=mongoKey;isOutput=true]$keys"
        name: keyVar
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      name: SelfPool
    steps:

    - task: NodeTool@0
      inputs:
        versionSpec: '16.x'
      displayName: 'Install Node.js'

    - task: Npm@1
      inputs:
        command: 'install'
        workingDir: '$(Build.SourcesDirectory)/api'

    - script: |

        npm --prefix $(Build.SourcesDirectory)/api run build --verbose
        
      displayName: 'Prepare API'

    - task: ArchiveFiles@2
      displayName: 'Archive API'
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/api/'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/API-$(Build.BuildId).zip
        replaceExistingArchive: true

    - task: Npm@1
      inputs:
        command: 'install'
        workingDir: '$(Build.SourcesDirectory)/ui'
      displayName: 'Install UI dependencies'
    - script: |

        npm --prefix $(Build.SourcesDirectory)/ui run build --verbose
      displayName: 'Build UI'        


    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/ui/dist'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/ui-$(Build.BuildId)'
        

    - upload: $(Build.ArtifactStagingDirectory)/
      artifact: drop



- stage: DeployApp
  displayName: Deployment
  jobs:
    - job: Deploy
      strategy:
        matrix:
          DESKTOP-RSIKN6Q:
            AGENT_NAME: 'DESKTOP-RSIKN6Q'
      pool:
        name: SelfPool
        demands: Agent.Name -equals $(AGENT_NAME)
      steps:

        - task: DownloadPipelineArtifact@2
          inputs:
            buildType: 'current'
            artifactName: 'drop'
            targetPath: '$(Pipeline.Workspace)'
          
        - task: AzureFileCopy@4
          inputs:
            azureSubscription: 'Azure subscription 1 (1ff6c602-69fe-454f-a795-de22a178a6c0)'
            SourcePath: '$(Pipeline.Workspace)/drop/ui-$(Build.BuildId)/*'
            Destination: AzureBlob
            storage: 'stccory0001'
            ContainerName: '$web'
# - stage: Deployment
#   displayName: Deployment stage
#   jobs:
#   - job: Deploy
#     displayName: Deploy
#     pool:
#       name: SelfPool
#     steps:
#       - task: AzureFunctionApp@1
#         inputs:
#           azureSubscription: 'Azure subscription 1 (1ff6c602-69fe-454f-a795-de22a178a6c0)'
#           appType: 'functionApp'
#           appName: 'clapptest0001'
#           package: '$(Pipeline.Workspace)/drop/API-$(Build.BuildId).zip'
#           deploymentMethod: 'auto'
#         displayName: Deploy API Funtions

#       - task: AzureFileCopy@4
#         inputs:
#           SourcePath: '$(Pipeline.Workspace)/drop/ui-$(Build.BuildId)/*'
#           azureSubscription: 'Azure subscription 1 (1ff6c602-69fe-454f-a795-de22a178a6c0)'
#           Destination: 'AzureBlob'
#           storage: 'stccory0001'
#           ContainerName: '$web'
#         displayName: Deploy UI
        