# Node.js Function App to Linux on Azure
# Build a Node.js function app and deploy it to Azure as a Linux function app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger: none

variables:

  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'e9df22f4-ef3b-492a-aabf-7d9afa1a3b76'

  # Function app name
  functionAppName: 'clapptest0001'

  # Environment name
  environmentName: 'dev'

  # Agent VM image name
 
  
stages:
- stage: IaC
  displayName: Create resources
  pool:
      name: SelfPool
      demands: Agent.Name -equals cl-ubuntu
  jobs:
    - job: CreateResources
      steps:    
      - task: AzureCLI@2
        inputs:
          azureSubscription: 'Azure subscription 1 (1ff6c602-69fe-454f-a795-de22a178a6c0)'
          scriptType: bash
          scriptLocation: 'inlineScript'
          inlineScript: 'az group create -n rgcoryleclair002 -l canadacentral'
      - task: AzureCLI@2
  
        inputs:
          azureSubscription: 'Azure subscription 1 (1ff6c602-69fe-454f-a795-de22a178a6c0)'
          scriptType: bash
          scriptLocation: 'inlineScript'
          inlineScript: 'az deployment group create -n myapp --resource-group rgcoryleclair002 -f "$(Build.SourcesDirectory)/bicep/main.bicep" -p "appName=clfapp001" -p existOrNew=false'
      - task: CmdLine@2
        inputs:
          script: |
            keys = az cosmosdb keys list --name clfapp001uj5oeplscvwcu --resource-group rgcoryleclair002 --type keys --output json | ConvertFrom-json | Select-Object -ExpandProperty primaryMasterKey
            echo "##vso[task.setvariable variable=mongoKey;isOutput=true]$keys"
        name: keyVar
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      name: SelfPool
      demands: Agent.Name -equals cl-ubuntu

    steps:

    - task: NodeTool@0
      inputs:
        versionSpec: '16.x'
      displayName: 'Install Node.js'

# (cd $(Build.SourcesDirectory)/api && npm run build --if-present)    
# (cd $(Build.SourcesDirectory)/api && npm run test --if-present)  
    #     cd $(Build.SourcesDirectory)/api
    #     npm install -g typescript
    #     npm $(Build.SourcesDirectory)/api install 
    - task: Npm@1
      inputs:
        command: 'install'
        workingDir: '$(Build.SourcesDirectory)/api'

    - script: |

        npm --prefix $(Build.SourcesDirectory)/api run build --verbose
        
      displayName: 'Prepare binaries'

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/api/'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Deploy

  displayName: Deploy stage
  dependsOn: 
   - Build
   - IaC
  condition: succeeded()
  variables:
   keys: $[ IaC.CreateResources.keyVar.outputs['keyVar.mongoKey'] ]
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: $(environmentName)
    pool:
      name: SelfPool
    strategy:
      runOnce:
        deploy:
          steps:

          - task: AzureFunctionApp@1
            inputs:
              azureSubscription: 'Azure subscription 1 (1ff6c602-69fe-454f-a795-de22a178a6c0)'
              appType: 'functionApp'
              appName: 'clapptest0001'
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              deploymentMethod: 'auto'